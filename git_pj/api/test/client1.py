#Импортируем библиотеку asyncio: Это стандартная библиотека Python для асинхронного
# программирования, которая позволяет выполнять задачи параллельно без использования многопоточности.
import asyncio

#Определяем асинхронную функцию main: Эта функция будет запускать клиента.
async def main(host='127.0.0.1', port=65432):

    #Устанавливаем соединение с сервером: await asyncio.open_connection(host, port) асинхронно устанавливает
    # соединение с сервером на указанном хосте и порту.
    #Возвращает объекты reader и writer для чтения и записи данных.
    reader, writer = await asyncio.open_connection(host, port)

    #Начинаем бесконечный цикл для ввода сообщений.
    while True:

        #Запрашиваем у пользователя ввод сообщения: input("Введите сообщение (или 'exit' для выхода): ")
        # ожидает ввода сообщения от пользователя.
        message = input("Введите сообщение (или 'exit' для выхода): ")

        #Проверяем, нужно ли выйти из цикла: Если пользователь вводит 'exit', выходим из цикла.
        if message.lower() == 'exit':
            break

        #Отправляем сообщение серверу: writer.write(message.encode()) записывает сообщение в буфер для отправки.
        # Сообщение кодируется в байты с помощью encode().
        writer.write(message.encode())

        #Ожидаем завершения отправки данных: await writer.drain() асинхронно ждет,
        # пока все данные будут отправлены.
        await writer.drain()

        #Читаем ответ от сервера: await reader.read(1024) асинхронно читает до 1024 байтов данных от сервера.
        data = await reader.read(1024)

        #Выводим полученные данные: data.decode() декодирует байты в строку, и мы выводим это сообщение.
        print(f"Получено от сервера: {data.decode()}")

#Запускаем клиента: Если скрипт запущен как основная программа, asyncio.run(main()) асинхронно запускает
# функцию main.
if __name__ == "__main__":
    asyncio.run(main())