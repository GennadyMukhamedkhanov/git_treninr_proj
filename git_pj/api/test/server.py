#Импортируем библиотеку asyncio: Это стандартная библиотека Python для асинхронного
# программирования, которая позволяет выполнять задачи параллельно без использования
# многопоточности.
import asyncio

#Определяем асинхронную функцию handle_client: Эта функция будет обрабатывать соединение с
# каждым клиентом.
async def handle_client(reader, writer):

    # Получаем адрес клиента: writer.get_extra_info('peername') возвращает адрес и порт
    # клиента, который установил соединение.
    client_address = writer.get_extra_info('peername')

    # Выводим сообщение о подключении клиента.
    print(f"Подключение от {client_address}")

#Начинаем бесконечный цикл для обработки данных от клиента.
    while True:

        #Читаем данные от клиента: await reader.read(1024) асинхронно читает до 1024 байтов
        # данных от клиента.
        data = await reader.read(1024)

        #Проверяем, есть ли данные: Если данных нет (клиент закрыл соединение),
        # выходим из цикла.
        if not data:
            break

        #Декодируем данные в строку: data.decode() преобразует байты в строку.
        message = data.decode()

        #Выводим полученные данные.
        print(f"Получено: {message}")

        #Отправляем данные обратно клиенту: writer.write(data) записывает данные в буфер
        # для отправки.
        writer.write(data)

        #Ожидаем завершения отправки данных: await writer.drain() асинхронно ждет,
        # пока все данные будут отправлены.
        await writer.drain()

    #Выводим сообщение о закрытии соединения.
    print(f"Соединение с {client_address} закрыто")

    #Закрываем соединение: writer.close() закрывает соединение с клиентом.
    writer.close()

    #Ожидаем завершения закрытия соединения: await writer.wait_closed() асинхронно ждет,
    # пока соединение будет полностью закрыто.
    await writer.wait_closed()

#Определяем асинхронную функцию main: Эта функция будет запускать сервер.
async def main(host='127.0.0.1', port=65432):

    #Создаем сервер: await asyncio.start_server(handle_client, host, port) асинхронно
    # создает сервер, который будет принимать соединения на указанном хосте и порту.
    # Каждое новое соединение будет обрабатываться функцией handle_client.
    server = await asyncio.start_server(handle_client, host, port)

    #Запускаем сервер: async with server создает контекстный менеджер, который автоматически
    # закрывает сервер после выполнения блока кода.
    async with server:

        #Запускаем бесконечный цикл сервера: await server.serve_forever() асинхронно
        # запускает сервер, который будет принимать и обрабатывать соединения до тех пор,
        # пока сервер не будет остановлен.
        await server.serve_forever()

#Запускаем сервер: Если скрипт запущен как основная программа, asyncio.run(main())
# асинхронно запускает функцию main.
if __name__ == "__main__":
    asyncio.run(main())